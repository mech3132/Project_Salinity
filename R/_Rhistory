uniqueotupwd <- '16sFRASER/OTUs.txt'
output <- "FRASER16_PD"
treepwd <- 'tree_F16_filt.tre'
} else if (d == "F18") {
print("STARTING FRASER 18 DATASET")
#Fraser18
mbpwd <- '18sFraser/modelBoundaries_type.txt'
otupwd <- '18sFraser/OTUTableText.txt'
uniqueotupwd <- '18sFraser/OTUs.txt'
output <- "FRASER18_PD"
treepwd <- 'tree_F18_filt.tre'
}
###### Load tree and data and functions #########
tree16 <- read.tree(file = paste0(treepwd))
mb <- read.delim(file=paste0(mbpwd))
otu <- read.delim(file=paste0(otupwd), row.names=1)
uniqueotu <- read.delim(file=uniqueotupwd, header=FALSE)
####################################
# make new dir
dir.create(paste0(output))
setwd(paste0(output))
taxa <- cbind(rownames(otu), as.character(otu[,ncol(otu)]))
otu <- otu[,-ncol(otu)]
# Filter OTU table to get rid of all OTUs not in uniqueotu; should automatically filter out low abund OTU
# I really shouldn't NEED this; but here it is in case.
# otu.filt <- otu[match(uniqueotu$V1, rownames(otu)),]
# for 18, need to filter out things that aren't in the tree-- some alignments failed.
otu.filt <- otu[tree16$tip.label,]
mb <- mb[match(rownames(otu.filt),mb$taxa),]
# Prune tree so there are only things in the table.
tree.pruned <- prune.sample(t(otu.filt), tree16)
# Find pairwise distances between all
taxa.dist <- cophenetic(tree.pruned)
# # First, adjust taxa.dist so that diagonal is NA and only includes things in mb
# taxa.dist.2 <- taxa.dist
# diag(taxa.dist.2) <- NA
# # Reorder
# taxa.dist.2 <- taxa.dist.2[as.character(mb[,1]), as.character(mb[,1])]
#
# # Basics
fresh.taxa <- mb[mb[,3] == "freshRestricted","taxa"]
brackish.taxa <- mb[mb[,3] == "brackishRestricted","taxa"]
marine.taxa <- mb[mb[,3] == "marineRestricted","taxa"]
# Split brackish; upper and lower
upper.brackish.taxa <-  mb[mb[,2] == "brackishPeakHiToler","taxa"]
lower.brackish.taxa <-  mb[mb[,2] == "brackishPeakLoToler","taxa"]
# Get midpoint of range for all brackish
# also, separate
temp.boundaries <- mb[match(brackish.taxa,mb[,1]),c("taxa","boundaries","boundariestwo")]
temp.midpoints <- apply(temp.boundaries[,c(2,3)], MARGIN = 1, FUN = mean)
names(temp.midpoints) <- temp.boundaries[,1]
high.brackish.taxa <- names(which(temp.midpoints >= 15))
low.brackish.taxa <- names(which(temp.midpoints < 15))
######### Get PD for nearest fresh, marine, brack for each OTU #########
typesSimple <- c("freshRestricted","marineRestricted","brackishRestricted")
freshOTUPD <- list()
for (t in typesSimple) {
# t <- typesSimple[1]
freshOTUPD[[t]] <- c()
for (n in 1:length(fresh.taxa)) {
# n <- 1
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(fresh.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
freshOTUPD[[t]] <- c(freshOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
# match(otuTestList, colnames(taxa.dist))
}
}
marineOTUPD <- list()
for (t in typesSimple) {
marineOTUPD[[t]] <- c()
for (n in 1:length(marine.taxa)) {
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(marine.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
marineOTUPD[[t]] <- c(marineOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
}
}
brackishOTUPD <- list()
for (t in typesSimple) {
brackishOTUPD[[t]] <- c()
for (n in 1:length(brackish.taxa)) {
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(brackish.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
brackishOTUPD[[t]] <- c(brackishOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
}
}
# BRACKISH statistical comparisons
capture.output(t.test(brackishOTUPD$freshRestricted, brackishOTUPD$marineRestricted, paired=TRUE),file = "brackish_compare_t.test_paired.txt")
capture.output(shapiro.test(brackishOTUPD$freshRestricted- brackishOTUPD$marineRestricted),file="brackish_compare_shapiro.txt")
capture.output(wilcox.test(brackishOTUPD$freshRestricted, brackishOTUPD$marineRestricted), file="brackish_compare_wilcox.txt")
# FRESH statistical comparisons
capture.output(t.test(freshOTUPD$freshRestricted, freshOTUPD$marineRestricted, paired=TRUE),file = "fresh_compare_t.test_paired.txt")
capture.output(shapiro.test(freshOTUPD$freshRestricted-freshOTUPD$marineRestricted),file="fresh_compare_shapiro.txt")
capture.output(wilcox.test(freshOTUPD$freshRestricted, freshOTUPD$marineRestricted), file="fresh_compare_wilcox.txt")
# MARINE statistical comparisons
capture.output(t.test(marineOTUPD$freshRestricted, marineOTUPD$marineRestricted, paired=TRUE),file = "marine_compare_t.test_paired.txt")
capture.output(shapiro.test(marineOTUPD$freshRestricted-marineOTUPD$marineRestricted),file="marine_compare_shapiro.txt")
capture.output(wilcox.test(marineOTUPD$freshRestricted, marineOTUPD$marineRestricted), file="marine_compare_wilcox.txt")
### First, plot fresh and marine OTUs in relation to each other
# find limits of fresh and  marine OTUs
rangeAxis <- range(c(freshOTUPD$freshRestricted,marineOTUPD$freshRestricted,freshOTUPD$marineRestricted,marineOTUPD$marineRestricted))
pdf("marinevsfresh_PD_to_nearestMarineFresh.pdf")
plot(NULL, xlim=c(0,rangeAxis[2]), ylim=c(0,rangeAxis[2]), xlab="Distance to nearest fresh OTU", ylab="Distance to nearest marine OTU")
points(freshOTUPD$freshRestricted, freshOTUPD$marineRestricted, pch=19, col="blue")
points(marineOTUPD$freshRestricted, marineOTUPD$marineRestricted, pch=19, col="red")
abline(a=0,b=1)
legend("top", legend=c("Fresh OTUs","Marine OTUs"), pch=c(19,19), col=c("blue","red"))
dev.off()
maxAxis <- max(c(brackishOTUPD$freshRestricted,brackishOTUPD$marineRestricted))
pdf("brackish_PD_to_nearestMarineFresh.pdf")
plot(brackishOTUPD$freshRestricted, brackishOTUPD$marineRestricted, pch=19, col="purple"
, xlab="Distance to nearest fresh OTU"
, ylab="Distance to nearest marine OTU"
, xlim=c(0,maxAxis)
, ylim=c(0,maxAxis))
abline(a=0,b=1)
dev.off()
pdf("brackish_PD_correlation_to_midpoint.pdf", 10,5)
par(mfrow=c(1,2))
plot(brackishOTUPD$freshRestricted~as.numeric(temp.midpoints), xlab="Midpoint of tolerance range", ylab="Phyl. Dist. to nearest freshwater specialist", col="blue")
# cor.to.fresh.summary <- summary(lm(brackishOTUPD$freshRestricted~as.numeric(temp.midpoints)))
cor.to.fresh.summary = cor.test(as.numeric(temp.midpoints),brackishOTUPD$freshRestricted, method=c("spearman"))
legend("topright", legend=c(paste0("P-value = ",signif(cor.to.fresh.summary$p.value,2)), paste0("Spearmen's Rho = ",signif(as.numeric(cor.to.fresh.summary$estimate),2))), pch=c("",""), bty="n")
abline(lm(brackishOTUPD$freshRestricted~as.numeric(temp.midpoints)))
plot(brackishOTUPD$marineRestricted~as.numeric(temp.midpoints), xlab="Midpoint of tolerance range", ylab="Phyl. Dist. to nearest marine specialist", col = "red")
# cor.to.marine.summary <- summary(lm(brackishOTUPD$marineRestricted~as.numeric(temp.midpoints)))
cor.to.marine.summary = cor.test(as.numeric(temp.midpoints),brackishOTUPD$marineRestricted, method=c("spearman"))
legend("topright", legend=c(paste0("P-value = ",signif(cor.to.marine.summary$p.value,2)), paste0("Spearman's Rho = ",signif(as.numeric(cor.to.marine.summary$estimate),2))), pch=c("",""), bty="n")
abline(lm(brackishOTUPD$marineRestricted~as.numeric(temp.midpoints)))
dev.off()
pdf("brackish_PD_correlation_to_midpoint_combined.pdf")
plot(brackishOTUPD$freshRestricted-brackishOTUPD$marineRestricted~as.numeric(temp.midpoints), xlab="Midpoint of tolerance range", ylab="Phyl. Dist. to nearest freshwater specialist")
# cor.to.fresh.summary <- summary(lm(brackishOTUPD$freshRestricted~as.numeric(temp.midpoints)))
cor.to.freshmarine.summary = cor.test(as.numeric(temp.midpoints),brackishOTUPD$freshRestricted-brackishOTUPD$marineRestricted, method=c("spearman"))
legend("topright", legend=c(paste0("P-value = ",signif(cor.to.fresh.summary$p.value,2)), paste0("Spearmen's Rho = ",signif(as.numeric(cor.to.freshmarine.summary$estimate),2))), pch=c("",""), bty="n")
abline(lm(brackishOTUPD$freshRestricted-brackishOTUPD$marineRestricted~as.numeric(temp.midpoints)))
dev.off()
brack.fresh <- lm(as.numeric(temp.midpoints)~brackishOTUPD$freshRestricted)
capture.output(stepAIC(brack.fresh),file="AIC_brackfresh.txt")
brack.marine <- lm(as.numeric(temp.midpoints)~brackishOTUPD$marineRestricted)
capture.output(stepAIC(brack.marine),file="AIC_brackmarine.txt")
setwd(workingDir)
}
library(picante) # for phylogenetic tree
library(MASS) # for stepAIC
workingDir =getwd()
setwd('../SALBIN/')
workingDir =getwd()
dataset <- c("B16","F16","F18")
print("STARTING FRASER 18 DATASET")
mbpwd <- '18sFraser/modelBoundaries_type.txt'
otupwd <- '18sFraser/OTUTableText.txt'
uniqueotupwd <- '18sFraser/OTUs.txt'
output <- "FRASER18_PD"
treepwd <- 'tree_F18_filt.tre'
tree16 <- read.tree(file = paste0(treepwd))
mb <- read.delim(file=paste0(mbpwd))
otu <- read.delim(file=paste0(otupwd), row.names=1)
uniqueotu <- read.delim(file=uniqueotupwd, header=FALSE)
dir.create(paste0(output))
setwd(paste0(output))
taxa <- cbind(rownames(otu), as.character(otu[,ncol(otu)]))
otu <- otu[,-ncol(otu)]
otu.filt <- otu[tree16$tip.label,]
mb <- mb[match(rownames(otu.filt),mb$taxa),]
tree.pruned <- prune.sample(t(otu.filt), tree16)
taxa.dist <- cophenetic(tree.pruned)
fresh.taxa <- mb[mb[,3] == "freshRestricted","taxa"]
brackish.taxa <- mb[mb[,3] == "brackishRestricted","taxa"]
marine.taxa <- mb[mb[,3] == "marineRestricted","taxa"]
upper.brackish.taxa <-  mb[mb[,2] == "brackishPeakHiToler","taxa"]
lower.brackish.taxa <-  mb[mb[,2] == "brackishPeakLoToler","taxa"]
temp.boundaries <- mb[match(brackish.taxa,mb[,1]),c("taxa","boundaries","boundariestwo")]
temp.midpoints <- apply(temp.boundaries[,c(2,3)], MARGIN = 1, FUN = mean)
names(temp.midpoints) <- temp.boundaries[,1]
high.brackish.taxa <- names(which(temp.midpoints >= 15))
low.brackish.taxa <- names(which(temp.midpoints < 15))
typesSimple <- c("freshRestricted","marineRestricted","brackishRestricted")
freshOTUPD <- list()
for (t in typesSimple) {
# t <- typesSimple[1]
freshOTUPD[[t]] <- c()
for (n in 1:length(fresh.taxa)) {
# n <- 1
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(fresh.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
freshOTUPD[[t]] <- c(freshOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
# match(otuTestList, colnames(taxa.dist))
}
}
marineOTUPD <- list()
for (t in typesSimple) {
marineOTUPD[[t]] <- c()
for (n in 1:length(marine.taxa)) {
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(marine.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
marineOTUPD[[t]] <- c(marineOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
}
}
typesSimple <- c("freshRestricted","marineRestricted","brackishRestricted")
freshOTUPD <- list()
for (t in typesSimple) {
# t <- typesSimple[1]
freshOTUPD[[t]] <- c()
for (n in 1:length(fresh.taxa)) {
# n <- 1
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(fresh.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
freshOTUPD[[t]] <- c(freshOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
# match(otuTestList, colnames(taxa.dist))
}
}
typesSimple
freshOTUPD[[t]] <- c()
n
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(fresh.taxa[n])
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
freshOTUPD[[t]] <- c(freshOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
freshOTUPD
min(taxa.dist[otu,otuTestList])
otuTestList
otu
taxa.dist
taxa.dist[otu,otuTestList]
taxa.dist
rownames(taxa.dist)
colnames(taxa.dist)
otu
fresh.taxa[n]
fresh.taxa
rownames(taxa.dist) == otu
any(rownames(taxa.dist) == otu)
taxa.dist[otu,]
mb[,3]
t
mb[,3]==t
mb[mb[,3]==t,1]
as.character(mb[mb[,3]==t,1])
otuTestList <- as.character(mb[mb[,3]==t,1])
otuTestList
taxa.dist[otu,otuTestList]
match(otuTestList, colnames(taxa.dist))
min(taxa.dist[otu,match(otuTestList, colnames(taxa.dist))])
taxa.dist[otu,match(otuTestList, colnames(taxa.dist))]
is.na(taxa.dist[otu,match(otuTestList, colnames(taxa.dist))])
any(is.na(taxa.dist[otu,match(otuTestList, colnames(taxa.dist))]))
which(is.na(taxa.dist[otu,match(otuTestList, colnames(taxa.dist))]))
taxa.dist[otu,match(otuTestList, colnames(taxa.dist))]
tree16$tip.label
tree16 <- read.tree(file = paste0(treepwd))
mb <- read.delim(file=paste0(mbpwd))
setwd(workingDir)
tree16 <- read.tree(file = paste0(treepwd))
mb <- read.delim(file=paste0(mbpwd))
otu <- read.delim(file=paste0(otupwd), row.names=1)
uniqueotu <- read.delim(file=uniqueotupwd, header=FALSE)
dir.create(paste0(output))
setwd(paste0(output))
taxa <- cbind(rownames(otu), as.character(otu[,ncol(otu)]))
otu <- otu[,-ncol(otu)]
otu.filt <- otu[tree16$tip.label,]
otu.filt
mb <- mb[match(rownames(otu.filt),mb$taxa),]
tree.pruned <- prune.sample(t(otu.filt), tree16)
taxa.dist <- cophenetic(tree.pruned)
taxa.dist
mb
colnames(taxa.dist) %in% mb$taxa
any(!colnames(taxa.dist) %in% mb$taxa)
any(!(colnames(taxa.dist) %in% mb$taxa))
any(!(mb$taxa %in% colnames(taxa.dist)))
tree16$tip.label
any(!(mb$taxa %in% tree16$tip.label))
otu.filt <- otu[tree16$tip.label,]
mb <- mb[match(rownames(otu.filt),mb$taxa),]
tree16$tip.labe
tree16$tip.label
otu
rownames(otu)
match(tree16$tip.label,rownames(otu))
otu.filt <- otu[ match(tree16$tip.label,rownames(otu)),]
mb <- mb[match(rownames(otu.filt),mb$taxa),]
tree.pruned <- prune.sample(t(otu.filt), tree16)
taxa.dist <- cophenetic(tree.pruned)
any(!(colnames(taxa.dist) %in% mb$taxa))
any(!(mb$taxa %in% tree16$tip.label))
rownames(otu.filt)
otu.filt <- otu[match(tree16$tip.label,rownames(otu)),]
match(rownames(otu.filt),mb$taxa)
mb <- mb[match(rownames(otu.filt),mb$taxa),]
t(otu.filt)
tree.pruned <- prune.sample(t(otu.filt), tree16)
taxa.dist <- cophenetic(tree.pruned)
any(!(colnames(taxa.dist) %in% mb$taxa))
any(!(mb$taxa %in% tree16$tip.label))
otu.filt
mb <- mb[match(rownames(otu.filt),mb$taxa),]
otu.filt <- otu[match(tree16$tip.label,rownames(otu)),]
tree.pruned <- prune.sample(t(otu.filt), tree16)
taxa.dist <- cophenetic(tree.pruned)
any(!(colnames(taxa.dist) %in% mb$taxa))
any(!(mb$taxa %in% tree16$tip.label))
which(!(mb$taxa %in% tree16$tip.label))
mb$taxa[1041]
mb$taxa
mb$taxa[1041,]
mb$taxa[1041]
mb$taxa[1042]
mb$taxa[1040]
View(mb)
mb[1040,]
mb[1041,]
is.na(mb$taxa)
mb <- mb[!is.na(mb$taxa),]
mb <- mb[match(rownames(otu.filt),mb$taxa),]
library(picante) # for phylogenetic tree
library(MASS) # for stepAIC
workingDir =getwd()
dataset <- c("B16","F16","F18")
setwd('../SALBIN/')
setwd('../')
workingDir =getwd()
dataset <- c("B16","F16","F18")
print("STARTING FRASER 18 DATASET")
mbpwd <- '18sFraser/modelBoundaries_type.txt'
otupwd <- '18sFraser/OTUTableText.txt'
uniqueotupwd <- '18sFraser/OTUs.txt'
output <- "FRASER18_PD"
treepwd <- 'tree_F18_filt.tre'
tree16 <- read.tree(file = paste0(treepwd))
mb <- read.delim(file=paste0(mbpwd))
otu <- read.delim(file=paste0(otupwd), row.names=1)
uniqueotu <- read.delim(file=uniqueotupwd, header=FALSE)
dir.create(paste0(output))
setwd(paste0(output))
taxa <- cbind(rownames(otu), as.character(otu[,ncol(otu)]))
otu <- otu[,-ncol(otu)]
otu.filt <- otu[tree16$tip.label,]
mb <- mb[!is.na(mb$taxa),]
mb <- mb[match(rownames(otu.filt),mb$taxa),]
tree.pruned <- prune.sample(t(otu.filt), tree16)
taxa.dist <- cophenetic(tree.pruned)
fresh.taxa <- mb[mb[,3] == "freshRestricted","taxa"]
brackish.taxa <- mb[mb[,3] == "brackishRestricted","taxa"]
marine.taxa <- mb[mb[,3] == "marineRestricted","taxa"]
upper.brackish.taxa <-  mb[mb[,2] == "brackishPeakHiToler","taxa"]
lower.brackish.taxa <-  mb[mb[,2] == "brackishPeakLoToler","taxa"]
temp.boundaries <- mb[match(brackish.taxa,mb[,1]),c("taxa","boundaries","boundariestwo")]
temp.midpoints <- apply(temp.boundaries[,c(2,3)], MARGIN = 1, FUN = mean)
names(temp.midpoints) <- temp.boundaries[,1]
high.brackish.taxa <- names(which(temp.midpoints >= 15))
low.brackish.taxa <- names(which(temp.midpoints < 15))
typesSimple <- c("freshRestricted","marineRestricted","brackishRestricted")
freshOTUPD <- list()
for (t in typesSimple) {
# t <- typesSimple[1]
freshOTUPD[[t]] <- c()
for (n in 1:length(fresh.taxa)) {
# n <- 1
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(fresh.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
freshOTUPD[[t]] <- c(freshOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
# match(otuTestList, colnames(taxa.dist))
}
}
min(taxa.dist[otu,otuTestList])
mb
is.na(mb$taxa)
any(is.na(mb$taxa))
!is.na(mb$taxa)
mb <- mb[which(!is.na(mb$taxa)),]
mb <- mb[match(rownames(otu.filt),mb$taxa),]
mb
is.na(mb$taxa)
any(is.na(mb$taxa))
mb <- mb[which(!is.na(mb$taxa)),]
any(is.na(mb$taxa))
mb <- mb[match(rownames(otu.filt),mb$taxa),]
mb <- mb[which(!is.na(mb$taxa)),]
tree.pruned <- prune.sample(t(otu.filt), tree16)
taxa.dist <- cophenetic(tree.pruned)
fresh.taxa <- mb[mb[,3] == "freshRestricted","taxa"]
brackish.taxa <- mb[mb[,3] == "brackishRestricted","taxa"]
marine.taxa <- mb[mb[,3] == "marineRestricted","taxa"]
upper.brackish.taxa <-  mb[mb[,2] == "brackishPeakHiToler","taxa"]
lower.brackish.taxa <-  mb[mb[,2] == "brackishPeakLoToler","taxa"]
temp.boundaries <- mb[match(brackish.taxa,mb[,1]),c("taxa","boundaries","boundariestwo")]
temp.midpoints <- apply(temp.boundaries[,c(2,3)], MARGIN = 1, FUN = mean)
names(temp.midpoints) <- temp.boundaries[,1]
high.brackish.taxa <- names(which(temp.midpoints >= 15))
low.brackish.taxa <- names(which(temp.midpoints < 15))
typesSimple <- c("freshRestricted","marineRestricted","brackishRestricted")
freshOTUPD <- list()
for (t in typesSimple) {
# t <- typesSimple[1]
freshOTUPD[[t]] <- c()
for (n in 1:length(fresh.taxa)) {
# n <- 1
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(fresh.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
freshOTUPD[[t]] <- c(freshOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
# match(otuTestList, colnames(taxa.dist))
}
}
marineOTUPD <- list()
for (t in typesSimple) {
marineOTUPD[[t]] <- c()
for (n in 1:length(marine.taxa)) {
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(marine.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
marineOTUPD[[t]] <- c(marineOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
}
}
brackishOTUPD <- list()
for (t in typesSimple) {
brackishOTUPD[[t]] <- c()
for (n in 1:length(brackish.taxa)) {
otuTestList <- as.character(mb[mb[,3]==t,1])
otu <- as.character(brackish.taxa[n])
# if it's fresh and fresh need to get rid of OTU that is the same as it
if ( otu %in% otuTestList ) {
otuTestList <- otuTestList[-match(otu, otuTestList)]
}
brackishOTUPD[[t]] <- c(brackishOTUPD[[t]],min(taxa.dist[otu,otuTestList]))
}
}
capture.output(t.test(brackishOTUPD$freshRestricted, brackishOTUPD$marineRestricted, paired=TRUE),file = "brackish_compare_t.test_paired.txt")
capture.output(shapiro.test(brackishOTUPD$freshRestricted- brackishOTUPD$marineRestricted),file="brackish_compare_shapiro.txt")
capture.output(wilcox.test(brackishOTUPD$freshRestricted, brackishOTUPD$marineRestricted), file="brackish_compare_wilcox.txt")
capture.output(t.test(freshOTUPD$freshRestricted, freshOTUPD$marineRestricted, paired=TRUE),file = "fresh_compare_t.test_paired.txt")
capture.output(shapiro.test(freshOTUPD$freshRestricted-freshOTUPD$marineRestricted),file="fresh_compare_shapiro.txt")
capture.output(wilcox.test(freshOTUPD$freshRestricted, freshOTUPD$marineRestricted), file="fresh_compare_wilcox.txt")
capture.output(t.test(marineOTUPD$freshRestricted, marineOTUPD$marineRestricted, paired=TRUE),file = "marine_compare_t.test_paired.txt")
capture.output(shapiro.test(marineOTUPD$freshRestricted-marineOTUPD$marineRestricted),file="marine_compare_shapiro.txt")
capture.output(wilcox.test(marineOTUPD$freshRestricted, marineOTUPD$marineRestricted), file="marine_compare_wilcox.txt")
rangeAxis <- range(c(freshOTUPD$freshRestricted,marineOTUPD$freshRestricted,freshOTUPD$marineRestricted,marineOTUPD$marineRestricted))
pdf("marinevsfresh_PD_to_nearestMarineFresh.pdf")
plot(NULL, xlim=c(0,rangeAxis[2]), ylim=c(0,rangeAxis[2]), xlab="Distance to nearest fresh OTU", ylab="Distance to nearest marine OTU")
points(freshOTUPD$freshRestricted, freshOTUPD$marineRestricted, pch=19, col="blue")
points(marineOTUPD$freshRestricted, marineOTUPD$marineRestricted, pch=19, col="red")
abline(a=0,b=1)
legend("top", legend=c("Fresh OTUs","Marine OTUs"), pch=c(19,19), col=c("blue","red"))
dev.off()
maxAxis <- max(c(brackishOTUPD$freshRestricted,brackishOTUPD$marineRestricted))
pdf("brackish_PD_to_nearestMarineFresh.pdf")
plot(brackishOTUPD$freshRestricted, brackishOTUPD$marineRestricted, pch=19, col="purple"
, xlab="Distance to nearest fresh OTU"
, ylab="Distance to nearest marine OTU"
, xlim=c(0,maxAxis)
, ylim=c(0,maxAxis))
abline(a=0,b=1)
dev.off()
pdf("brackish_PD_correlation_to_midpoint.pdf", 10,5)
par(mfrow=c(1,2))
plot(brackishOTUPD$freshRestricted~as.numeric(temp.midpoints), xlab="Midpoint of tolerance range", ylab="Phyl. Dist. to nearest freshwater specialist", col="blue")
cor.to.fresh.summary = cor.test(as.numeric(temp.midpoints),brackishOTUPD$freshRestricted, method=c("spearman"))
legend("topright", legend=c(paste0("P-value = ",signif(cor.to.fresh.summary$p.value,2)), paste0("Spearmen's Rho = ",signif(as.numeric(cor.to.fresh.summary$estimate),2))), pch=c("",""), bty="n")
abline(lm(brackishOTUPD$freshRestricted~as.numeric(temp.midpoints)))
plot(brackishOTUPD$marineRestricted~as.numeric(temp.midpoints), xlab="Midpoint of tolerance range", ylab="Phyl. Dist. to nearest marine specialist", col = "red")
cor.to.marine.summary = cor.test(as.numeric(temp.midpoints),brackishOTUPD$marineRestricted, method=c("spearman"))
legend("topright", legend=c(paste0("P-value = ",signif(cor.to.marine.summary$p.value,2)), paste0("Spearman's Rho = ",signif(as.numeric(cor.to.marine.summary$estimate),2))), pch=c("",""), bty="n")
abline(lm(brackishOTUPD$marineRestricted~as.numeric(temp.midpoints)))
dev.off()
pdf("brackish_PD_correlation_to_midpoint_combined.pdf")
plot(brackishOTUPD$freshRestricted-brackishOTUPD$marineRestricted~as.numeric(temp.midpoints), xlab="Midpoint of tolerance range", ylab="Phyl. Dist. to nearest freshwater specialist")
cor.to.freshmarine.summary = cor.test(as.numeric(temp.midpoints),brackishOTUPD$freshRestricted-brackishOTUPD$marineRestricted, method=c("spearman"))
legend("topright", legend=c(paste0("P-value = ",signif(cor.to.fresh.summary$p.value,2)), paste0("Spearmen's Rho = ",signif(as.numeric(cor.to.freshmarine.summary$estimate),2))), pch=c("",""), bty="n")
abline(lm(brackishOTUPD$freshRestricted-brackishOTUPD$marineRestricted~as.numeric(temp.midpoints)))
dev.off()
brack.fresh <- lm(as.numeric(temp.midpoints)~brackishOTUPD$freshRestricted)
capture.output(stepAIC(brack.fresh),file="AIC_brackfresh.txt")
brack.marine <- lm(as.numeric(temp.midpoints)~brackishOTUPD$marineRestricted)
capture.output(stepAIC(brack.marine),file="AIC_brackmarine.txt")
setwd(workingDir)
